import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    ext {
        projectVersion = '2.1.1.SNAPSHOT'

        grpcVersion = '1.14.0'
        protobufVersion = '3.5.1'
        protobufGradlePluginVersion = '0.8.4'

        springBootVersion = '2.0.4.RELEASE'
        springSecurityVersion = '5.0.5.RELEASE'
        springSleuthVersion = '2.0.1.RELEASE'
        springCloudVersion = 'Finchley.SR1'
        springCloudConsulVersion = '2.0.1.RELEASE'
        springCloudEurekaVersion = '2.0.1.RELEASE'
        springCloudZookeeperVersion = '2.0.0.RELEASE'
        braveInstrumentationGrpc = '5.1.2'
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.15.0"
    }
}

plugins {
    id "net.nemerosa.versioning" version "2.8.2"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}


def buildTimeAndDate = OffsetDateTime.now()

ext {
    buildDate = DateTimeFormatter.ISO_LOCAL_DATE.format(buildTimeAndDate)
    buildTime = DateTimeFormatter.ofPattern('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    buildRevision = versioning.info.commit
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'com.diffplug.gradle.spotless'

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        options.encoding = 'UTF-8'
    }

    compileJava.options*.compilerArgs = [
            "-Xlint:serial", "-Xlint:varargs", "-Xlint:classfile", "-Xlint:dep-ann",
            "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally", "-Xlint:overrides",
            "-Xlint:path", "-Xlint:static", "-Xlint:try", "-Xlint:fallthrough",
            "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:-options"
    ]

    spotless {
        java {
            licenseHeaderFile rootProject.file('extra/spotless/mit-license.java')
            removeUnusedImports()
            importOrderFile rootProject.file('extra/eclipse/eclipse.importorder')
            eclipse().configFile rootProject.file('extra/eclipse/eclipse-formatter.xml')
        }
    }

    // Enable Checkstyle
    if (null != System.getenv('ENABLE_CHECKSTYLE')) {
        apply plugin: 'checkstyle'
        checkstyle {
            toolVersion '8.14'
            configFile new File(rootDir, "extra/checkstyle/checkstyle.xml")
            showViolations true
        }
    }

    // Copy LICENSE    
    tasks.withType(Jar) {
        from(project.rootDir) {
            include 'LICENSE'
            into 'META-INF'
        }
    }

    // Generate MANIFEST.MF
    jar {
        manifest {
            attributes(
                    'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                    'Built-By': "travis",
                    'Build-Date': buildDate,
                    'Build-Time': buildTime,
                    'Built-OS': "${System.properties['os.name']}",
                    'Build-Revision': buildRevision,
                    'Specification-Title': project.name,
                    'Specification-Version': "${projectVersion}",
                    'Specification-Vendor': 'Michael Zhang',
                    'Implementation-Title': project.name,
                    'Implementation-Version': "${projectVersion}",
                    'Implementation-Vendor': 'Michael Zhang'
            )
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.spring.io/libs-milestone' }
    }
    dependencies {
        compileOnly('org.projectlombok:lombok:1.18.0')
        testCompile('org.projectlombok:lombok:1.18.0')
        annotationProcessor('org.projectlombok:lombok:1.18.0')
    }
    buildscript {
        repositories {
            mavenLocal()
            mavenCentral()
            jcenter()
            maven { url 'http://repo.spring.io/plugins-release' }
            maven { url "https://plugins.gradle.org/m2/" }
        }
    }
}

apply from: './deploy.gradle'

group = "net.devh"
version = "${projectVersion}"

dependencies {
    compile project(':grpc-server-spring-boot-starter')
    compile project(':grpc-client-spring-boot-starter')
    testCompile project(':tests')
}
